/******************************************************************************
 *
 * MIT License
 *
 * Copyright (c) 2020 OrthogonalHawk
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 *****************************************************************************/

/******************************************************************************
 *
 * @file     falcon_dsp_predefined_fir_filter.h
 * @author   OrthogonalHawk
 * @date     12-Feb-2020
 *
 * @brief    Predefined FIR filter coefficients.
 *
 * @section  DESCRIPTION
 *
 * Defines a set of predefined/precomputed FIR filter coefficients.
 *
 * @section  HISTORY
 *
 * 12-Feb-2020  OrthogonalHawk  Created file.
 *
 *****************************************************************************/

#ifndef __FALCON_DSP_TRANSFORM_PREDEFINED_FIR_FILTER_H__
#define __FALCON_DSP_TRANSFORM_PREDEFINED_FIR_FILTER_H__

/******************************************************************************
 *                               INCLUDE_FILES
 *****************************************************************************/

#include <complex>
#include <map>
#include <vector>

/******************************************************************************
 *                                 CONSTANTS
 *****************************************************************************/

/******************************************************************************
 *                              ENUMS & TYPEDEFS
 *****************************************************************************/

enum class filter_source_type_e : uint32_t
{
    REMEZ = 0,
    FIRLS
};

enum class filter_taps_e : int32_t
{
    FILTER_TAPS_OPTIMAL = -1,
    FILTER_TAPS_16 = 16,
    FILTER_TAPS_32 = 32,
    FILTER_TAPS_64 = 64,
    FILTER_TAPS_128 = 128,
    FILTER_TAPS_256 = 256
};

struct predefined_resample_filter_key_s
{
    predefined_resample_filter_key_s(uint32_t in_sps, uint32_t out_sps, filter_taps_e taps, filter_source_type_e _source)
      : input_sample_rate(in_sps),
        output_sample_rate(out_sps),
        num_taps(taps),
        source(_source)
    { }

    bool operator<(const predefined_resample_filter_key_s& other) const
    {
        if (other.input_sample_rate == this->input_sample_rate)
        {
            if (other.output_sample_rate == this->output_sample_rate)
            {
                if (other.num_taps == this->num_taps)
                {
                    return static_cast<uint32_t>(other.source) < static_cast<uint32_t>(this->source);
                }
                else
                {
                    return static_cast<int32_t>(other.num_taps) < static_cast<int32_t>(this->num_taps);
                }
            }
            else
            {
                return other.output_sample_rate < this->output_sample_rate;
            }
        }
        else
        {
            return other.input_sample_rate < this->input_sample_rate;
        }
    }

    uint32_t                 input_sample_rate;
    uint32_t                 output_sample_rate;
    filter_taps_e            num_taps;
    filter_source_type_e     source;
};

struct predefined_resample_filter_params_s
{
    uint32_t up_rate;
    uint32_t down_rate;
    std::vector<std::complex<float>> coeffs;
};

/******************************************************************************
 *                                  MACROS
 *****************************************************************************/

namespace falcon_dsp
{
    /******************************************************************************
     *                                 CONSTANTS
     *****************************************************************************/

    /* auto-generated set of predefined filter coefficients. these coefficients were
     *  generated by the 'generate_predefined_fir_filter_coeffs.ipynb' Python Jupyter
     *  notebook in the test/utilities folder.
     */
    extern std::map<predefined_resample_filter_key_s, predefined_resample_filter_params_s> s_predefined_resample_fir_coeffs;
}

#endif // __FALCON_DSP_TRANSFORM_PREDEFINED_FIR_FILTER_H__
